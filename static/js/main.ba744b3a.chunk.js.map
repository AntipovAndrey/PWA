{"version":3,"sources":["serviceWorker.js","actions/types.js","components/TodoListItem.js","components/TodoList.js","actions/index.js","components/App.js","reducers/todoReducer.js","reducers/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TodoListItem","_ref","todo","onToggled","react_default","a","createElement","title","createItem","components_TodoListItem","key","id","inToggled","connect","Object","values","addTodo","type","payload","toggleTodo","todoId","removeTodo","props","Fragment","map","App","components_TodoList","INITIAL_STATE","1","completed","combineReducers","arguments","length","undefined","action","objectSpread","defineProperty","_","omit","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","ReactDOM","render","es","components_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ba744b3a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\n","import React from 'react';\n\nconst TodoListItem = ({todo, onToggled}) => (\n  <div>\n    {todo.title}\n  </div>\n);\n\nexport default TodoListItem;","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {addTodo, removeTodo, toggleTodo} from '../actions';\nimport TodoListItem from './TodoListItem';\n\nconst TodoList = props => (\n  <>\n    {props.todo.map(todo => createItem(todo, props.toggleTodo))}\n  </>\n);\n\nconst createItem = (todo, onToggled) => {\n  return <TodoListItem key={todo.id}\n                       todo={todo}\n                       inToggled={() => onToggled(todo.id)}/>\n};\n\nconst mapStateToProps = state => ({\n  todo: Object.values(state.todo)\n});\n\nexport default connect(mapStateToProps,\n  {addTodo, toggleTodo, removeTodo}\n)(TodoList);","import {ADD_TODO, TOGGLE_TODO, REMOVE_TODO} from './types';\n\nexport const addTodo = todo => ({type: ADD_TODO, payload: todo});\n\nexport const toggleTodo = todoId => ({type: TOGGLE_TODO, payload: todoId});\n\nexport const removeTodo = todoId => ({type: REMOVE_TODO, payload: todoId});\n","import React from 'react';\n\nimport TodoList from './TodoList';\n\nconst App = () => (\n  <TodoList/>\n);\n\nexport default App;\n","import _ from 'lodash';\nimport {ADD_TODO, TOGGLE_TODO, REMOVE_TODO} from '../actions/types';\n\nconst INITIAL_STATE = {\n  1: {\n    id: 1,\n    title: 'sample',\n    completed: false\n  }\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {...state, [action.payload.id]: action.payload};\n    case REMOVE_TODO:\n      return _.omit(state, action.payload);\n    case TOGGLE_TODO:\n      const todo = state[action.payload.id];\n      todo.completed = !todo.completed;\n      return {...state, [action.payload.id]: todo};\n    default:\n      return state;\n  }\n};\n","import {combineReducers} from 'redux';\n\nimport todoReducer from './todoReducer';\n\nexport default combineReducers({\n  todo: todoReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, compose} from 'redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root')\n);\n\n\nserviceWorker.register();\n"],"sourceRoot":""}