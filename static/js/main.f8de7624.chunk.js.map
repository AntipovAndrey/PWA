{"version":3,"sources":["serviceWorker.js","components/TodoListItem.js","components/TodoList.js","actions/index.js","actions/types.js","components/AddTodo.js","components/GitHubLink.js","components/App.js","components/Loading.js","reducers/todoReducer.js","reducers/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","TodoListItem","_ref","todo","onToggled","onRemoved","react_default","a","createElement","style","marginTop","marginBottom","textDecorationLine","completed","onClick","title","mapReversed","arr","cb","map","_","index","length","createItem","components_TodoListItem","key","id","connect","toggleTodo","todoId","type","payload","removeTodo","Fragment","t","addTodo","uuid","date","Date","input","onSubmit","e","preventDefault","value","trim","htmlFor","autoComplete","ref","node","GitHubLink","href","App","components_GitHubLink","components_AddTodo","components_TodoList","Loading","INITIAL_STATE","combineReducers","arguments","undefined","action","concat","Object","toConsumableArray","filter","item","objectSpread","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","storage","store","createStore","persistReducer","reducers","ReactDOM","render","es","integration_react","loading","components_Loading","persistor","persistStore","components_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f8de7624.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst TodoListItem = ({todo, onToggled, onRemoved}) => (\n  <div\n    style={{\n      marginTop: '20px',\n      marginBottom: '20px',\n      textDecorationLine: todo.completed ? 'line-through' : ''\n    }}\n    onClick={onToggled}>\n    <span> [</span><span onClick={onRemoved}>x</span><span>] </span>\n    {todo.title}\n  </div>\n);\n\nexport default TodoListItem;","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {removeTodo, toggleTodo} from '../actions';\nimport TodoListItem from './TodoListItem';\n\nconst TodoList = ({todo, toggleTodo, removeTodo}) => (\n  <>\n    {mapReversed(todo, t => createItem(t, toggleTodo, removeTodo))}\n  </>\n);\n\nconst mapReversed = (arr, cb) => arr.map((_, index) => cb(arr[arr.length - 1 - index]));\n\nconst createItem = (todo, onToggled, onRemoved) => {\n  return <TodoListItem key={todo.id}\n                       todo={todo}\n                       onToggled={() => onToggled(todo.id)}\n                       onRemoved={() => onRemoved(todo.id)}/>\n};\n\nconst mapStateToProps = state => ({\n  todo: state.todo\n});\n\nexport default connect(mapStateToProps,\n  {toggleTodo, removeTodo}\n)(TodoList);","import uuid from 'uuid';\nimport {ADD_TODO, TOGGLE_TODO, REMOVE_TODO} from './types';\n\nexport const addTodo = todo => ({\n  type: ADD_TODO,\n  payload: {\n    id: uuid(),\n    date: new Date(),\n    title: todo,\n    completed: false\n  }\n});\n\nexport const toggleTodo = todoId => ({type: TOGGLE_TODO, payload: todoId});\n\nexport const removeTodo = todoId => ({type: REMOVE_TODO, payload: todoId});\n","export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {addTodo} from '../actions';\n\nconst AddTodo = ({addTodo}) => {\n  let input;\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        if (input.value.trim()) {\n          addTodo(input.value);\n          input.value = '';\n        }\n      }}>\n      <label htmlFor=\"title\">\n        Title:\n        <input autoComplete=\"off\" id=\"title\" ref={node => (input = node)}/>\n      </label>\n\n      <button type=\"submit\">Add Todo</button>\n    </form>\n  );\n};\n\nexport default connect(null, {addTodo})(AddTodo);\n","import React from 'react';\n\nconst GitHubLink = () => {\n  return (\n    <>\n      Visit <a href=\"https://github.com/AntipovAndrey\">GitHub</a>\n      <p/>\n    </>\n  );\n};\n\nexport default GitHubLink;","import React from 'react';\n\nimport TodoList from './TodoList';\nimport AddTodo from './AddTodo';\nimport GitHubLink from './GitHubLink';\n\nconst App = () => (\n  <>\n    <GitHubLink/>\n    <AddTodo/>\n    <TodoList/>\n  </>\n);\n\nexport default App;\n","import React from 'react';\n\nconst Loading = () => (<div>Loading...</div>);\n\nexport default Loading;","import {ADD_TODO, TOGGLE_TODO, REMOVE_TODO} from '../actions/types';\n\nconst INITIAL_STATE = [];\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [...state, action.payload];\n    case REMOVE_TODO:\n      return state.filter(t => t.id !== action.payload);\n    case TOGGLE_TODO:\n      return state.map((item) => {\n        if (item.id !== action.payload) {\n          return item\n        }\n        return {...item, completed: !item.completed}\n      });\n    default:\n      return state;\n  }\n};\n","import {combineReducers} from 'redux';\n\nimport todoReducer from './todoReducer';\n\nexport default combineReducers({\n  todo: todoReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {compose, createStore} from 'redux';\nimport {PersistGate} from 'redux-persist/integration/react';\nimport {persistReducer, persistStore} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport Loading from './components/Loading';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst store = createStore(persistReducer(persistConfig, reducers), composeEnhancers());\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={<Loading/>} persistor={persistStore(store)}>\n      <App/>\n    </PersistGate>\n    <\n    /Provider>\n    , document.getElementById('root')\n    );\n\n\n    serviceWorker.register();\n"],"sourceRoot":""}